step 0:
    write own forth definition check
step 0.5:
    write a forth lexer/parser
    //skip this just write a printer all forth programs will be generated
step 0.9:
    write a forth interpreter without registers and a reduced instuction set
step 1:
    write a forth interpreter
step 2:
    write a simple environemnt and some simple environment calls
    2.1:build a simple environment(ala array with pointers to cells and cells)
step 3:
    add cell generation
step 4:
    add reproduction
step 5:
    add mutation
step 6:
    add competition (eating other cells)


step n-2
    getting some performance in / multithreading
step n-1:
    ???
step n:
    profit

//TODO
add seed
add eat
deleting organisms//needed if implementing decay or eat
some sort of global energy to draw from
improve code generation further
add born in field to orgs
do automatic expanding stacks
add a skip instruction

more efficient field

adding rng-seed and prng

decide wich mutations to use
maybe add selfmodifiying capabilities
    is a child getting the initial code of parent or the code at birth?
adding gender
adding multitasking within a cell
add more reflection
    get stacksizes


//DONE
improve code generation
add code_print
generate code blocks
more bitwise operations(shifting)//first define what shift does exactly(c standard is pretty vague here)
