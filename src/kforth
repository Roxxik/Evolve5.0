My Forth machine
based on the things i remember of kforth

it has:
a programm
  can contain function definitions
  some syscalls, i define those myself(e.g. OMOVE, for later use in evolve)
registers
a data stack
a call stack


i won't support nested blocks


defining the language: syntactics
Terminal Symbols are wrapped in ''
whitespace is ignored
comments are regarded as whitespace begin with ';' end with '\n'

program := block { block }
block := label ':' '{' { label } '}'
predfined labels:
instruction := stack-instruction | arithmetic-logic-instruction | control-flow-instuction | register-instructions | type-instruction

stack:
    dup
    pop
    rot
    swap
    ...

arithmeticlogical:
+ - * / mod and or == < > != not invert...

controlflow:
    call - call a code block
    if - call a code block IF true
    ifelse - call code block
    ?loop - jump to beginning of code block if true
    ?exit - jump to end of code block if true 

register
Rn
Rn!
and R0-9
R0-9!

type:
pack2 unpack 2

semantics:
    there always has to be a main block
